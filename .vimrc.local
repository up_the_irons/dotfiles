set t_Co=256

set runtimepath+=~/.vim.local

" Directories for swp files
set backupdir=~/.vim/
set directory=~/.vim/

let mapleader=","
:set timeoutlen=1500

:se ai
:se expandtab
:se ts=2
:se sw=2

set wrap
set showbreak=…
set linebreak
set number
set ruler

:se pastetoggle=<F11>
:se backspace=eol,indent,start

" set textwidth=72

" Whitespace stuff
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set list listchars=tab:\ \ ,trail:·

" Searching
set hlsearch
set incsearch
set ignorecase
set smartcase

syntax on

" Better searching
set incsearch
set showmatch
set hlsearch
nnoremap <leader><space> :noh<cr>

" Quick tabs
:nnoremap <C-]> gt
" :nnoremap <C-h> gT

" Quick save
:nnoremap <C-s> :wa<CR>

:command Rtw :%s/\s\+$//e

" <Leader>t is used by the AlignMaps plugin quite a bit, so I changed
" this to <Leader>f.  Also, this fixes the large delay when invoking
" CommandT.
if !hasmapto(':CommandT<CR>')
  silent! nmap <unique> <silent> <Leader>f :CommandT<CR>
endif

" Abbreviations (insert mode)
"
" TODO: Only define these when not editing code
:ia th thank you
:ia Ty Thank you
:ia ty thank you
:ia th thanks
:ia Th Thanks
:ia lmk let me know
:ia Lmk Let me know
:ia bc because
:ia Bc Because
:ia rfc RFC
:ia wu what's up?
:ia w with
:ia wo without
:ia u you
:ia np no problem
:ia Np No problem
:ia ok OK
:ia i I
:ia vps VPS
":ia uuid UUID
:ia vpn VPN
:ia pa Please advise

" Spell check
:command Spell :setlocal spell spelllang=en_us

" Go
set runtimepath+=~/src/go/misc/vim
au BufRead,BufNewFile *.go set filetype=go

" Thorfile, Rakefile, Vagrantfile and Gemfile are Ruby
au BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Thorfile,config.ru}    set ft=ruby

" add json syntax highlighting
au BufNewFile,BufRead *.json set ft=javascript

au BufRead,BufNewFile *.rst set filetype=rst

" Tweaks after I installed amix vimrc
" -----------------------------------

set noshowmode

set cmdheight=1

colorscheme badwolf

set updatetime=500

nnoremap <silent> <leader><leader>b :BufExplorer<CR>

" fzf
let g:fzf_command_prefix='Fzf'
let g:fzf_buffers_jump=1
nnoremap <silent> <leader>o :FzfFiles<CR>
nnoremap <silent> <leader>b :FzfBuffers<CR>
nnoremap <silent> <leader>r :FzfRg<CR>

" Customize fzf colors to match your color scheme
" - fzf#wrap translates this to a set of `--color` options
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

" Enable per-command history
" - History files will be stored in the specified directory
" - When set, CTRL-N and CTRL-P will be bound to 'next-history' and
"   'previous-history' instead of 'down' and 'up'.
" let g:fzf_history_dir = '~/.local/share/fzf-history'

" Comfortable motion
:unmap <c-b>
nnoremap <silent> <C-d> :call comfortable_motion#flick(100)<CR>
nnoremap <silent> <C-u> :call comfortable_motion#flick(-100)<CR>

" " -------------
" :cunmap <c-p>
" :unmap <c-f>
" :unmap <c-b>

" Use pencile colorscheme when going into Goyo mode
function! s:goyo_enter()
    colorscheme pencil
endfunction

function! s:goyo_leave()
    colorscheme badwolf
endfunction

autocmd! User GoyoEnter nested call <SID>goyo_enter()
autocmd! User GoyoLeave nested call <SID>goyo_leave()

" --------------
" vim-easymotion
" --------------
" <Leader>f{char} to move to {char}
map  <Leader><Leader>f <Plug>(easymotion-bd-f)
nmap <Leader><Leader>f <Plug>(easymotion-overwin-f)

" s{char}{char} to move to {char}{char}
nmap s <Plug>(easymotion-overwin-f2)

" Move to line
map <Leader>L <Plug>(easymotion-bd-jk)
nmap <Leader>L <Plug>(easymotion-overwin-line)

" Move to word
map  <Leader><Leader>w <Plug>(easymotion-bd-w)
nmap <Leader><Leader>w <Plug>(easymotion-overwin-w)

let g:EasyMotion_smartcase = 1
" ------------------
" END vim-easymotion
" ------------------

" GitGutter
let g:gitgutter_enabled = 1
nnoremap <silent> <leader>x :GitGutterNextHunk<CR>:GitGutterPreviewHunk<CR>
nnoremap <silent> <leader><leader>x :GitGutterStageHunk<CR>:GitGutterNextHunk<CR>:GitGutterPreviewHunk<CR>

" Autoformat
noremap <leader>a :Autoformat<CR>

" SnipMate
" 
" use the new parser
let g:snipMate = { 'snippet_version' : 1  }
let g:snipMate.description_in_completion = 1

"Screw ale, nothing is enabled by default.  Even with the stuff below,
" it doesn't want to format my .js files.  Autoformat, on the other
" hand, works great out-of-the-box
"
"" ale
""
"" Bind F8 to fixing problems with ALE
"nmap <F8> <Plug>(ale_fix)

"let g:ale_linters = {
"\   'javascript': ['standard'],
"\}
"let g:ale_fixers = {
"\   '*': ['remove_trailing_lines', 'trim_whitespace'],
"\   'javascript': ['standard'],
"\   'yaml': ['prettier'],
"\}

"let g:ale_lint_on_save = 1
"let g:ale_fix_on_save = 1
"" END: ale
